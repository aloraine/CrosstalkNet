module.exports = {
    createEdges: function(epiNodes, stromaNodes, weights) {
        var edges = [];

        for (var i = 0; i < epiNodes.length; i++) {
            for (var j = i + 1; j < stromaNodes.length; j++) {
                if (weights[i][j] != 0) {
                    edges.push({
                        data: {
                            id: 'EpiToStroma' + epiNodes[i].data.id.slice(0, -2) +
                                stromaNodes[j].data.id.slice(0, -2),
                            source: epiNodes[i].data.id,
                            target: stromaNodes[j].data.id,
                            weight: weights[i][j]
                        }
                    });
                }

                if (j < weights.length && weights[j][i] != 0) {
                    edges.push({
                        data: {
                            id: 'StromaToEpi' + stromaNodes[i].data.id.slice(0, -2) +
                                epiNodes[j].data.id.slice(0, -2),
                            source: stromaNodes[i].data.id,
                            target: epiNodes[j].data.id,
                            weight: weights[j][i]
                        }
                    });
                }
            }

            if (weights[i][i] != 0) {
                edges.push({
                    data: {
                        id: 'selfLoop' + epiNodes[i].data.id,
                        source: stromaNodes[i].data.id,
                        target: epiNodes[i].data.id,
                        weight: weights[i][i]
                    }
                });
            }
        }

        console.log('Epi Nodes Length: ' + epiNodes.length);
        console.log('Stroma Nodes Length: ' + stromaNodes.length);
        console.log("Edges Length: " + edges.length);
        return edges;
    },
    createEdgesFromNode: function(node, neighbours, weights) {
        var edges = [];
        var idPrefix = node.data.parent == "epi" ? "EpiToStroma" : "StromaToEpi";
        for (var i = 0; i < neighbours.length; i++) {
            if (node.data.id)
                edges.push({
                    data: {
                        id: idPrefix + neighbours[i].data.id.slice(0, -2),
                        source: node.data.id,
                        target: neighbours[i].data.id,
                        weight: weights[i]
                    }
                })
        }

        return edges;
    }
};
