// Contains utility functions for creating cytoscape configs and adding layouts to them

module.exports = {
    createConfig: function() {
        var config = {
            motionBlur: true,
            hideEdgesOnViewport: true,
            hideLabelsOnViewport: true,
            textureOnViewport: true,
            style: [{
                selector: 'node',
                style: {
                    'content': 'data(id)',
                    'font-size': '10px',
                    'color': '#7B1FA2'
                }
            }, {
                selector: ':parent',
                style: {
                    'background-opacity': 0.6
                }
            }, {
                selector: 'node:selected',
                style: {
                    'background-color': 'red'
                }
            }, {
                selector: 'node.located',
                style: {
                    'background-color': '#76FF03'
                }
            }, {
                selector: '.faded-edge',
                style: {
                    'opacity': '0'
                }
            }, {
                selector: '.highlighted-edge',
                style: {
                    'line-color': 'magenta'
                }
            }]
        };

        return config;
    },
    setConfigElements: function(config, elements) {
        if (elements instanceof Array) {
            config.elements = elements;
        } else {
            var temp = [];
            temp = temp.concat(elements.epiNodes);
            temp = temp.concat(elements.stromaNodes);
            temp = temp.concat(elements.edges);

            if (elements.epiParent != null) {
                temp.push(elements.epiParent);
                temp.push(elements.stromaParent);
            }

            config.elements = temp;
        }
    },
    createConcentricLayout: function(gene) {
        var layout = {
            name: 'concentric',
            concentric: function(node) {
                if (node.id() == gene) {
                    console.log("no");
                    return 10000;
                } else if (node.id().indexOf("-sr") > 0 || node.id().indexOf("-er") > 0) {
                    console.log("yes");
                    return 1;
                } else {
                    console.log("maybe");
                    return 1000;
                }

                //return node.degree();
            },
            levelWidth: function(nodes) {
                return 1;
            }

        }

        return layout;
    },
    createPresetLayout: function() {
        var layout = {
            name: "preset"
        };

        return layout;
    },
    setConfigLayout: function(config, layout) {
        config.layout = layout;
    },
    addStyleToConfig: function(config, style) {
        config.style.push(style);
    },
    addStylesToConfig: function(config, styles) {
        for (var i = 0; i < styles.length; i++) {
            config.style.push(styles[i]);
        }
    }
};
