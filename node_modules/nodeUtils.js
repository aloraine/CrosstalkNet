// Contains utility functions for creating, styling, and positioning nodes
var styleUtils = require('styleUtils');
var classes = styleUtils.classSuffixes;

function createAllClasses(prefix) {
    var classesString = '';
    var classesConcatenated = classes.map(function(suffix) {
        return prefix + "-" + suffix;
    });

    classesString = classesConcatenated.join(" ");

    return classesString;
}

module.exports = {
    addPositionsToNodes: function(nodes, initialX, initialY, xPattern, yPattern) {
        if (!(nodes instanceof Array)) {
            nodes.position = {
                x: initialX + (xPattern),
                y: initialY + (yPattern)
            };
        } else {
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].position = {
                    x: initialX + (i * xPattern),
                    y: initialY + (i * yPattern)
                };
            }
        }
    },
    addStyleToNodes: function(nodes, width, height, textHAlign, textVAlign, backgroundColor) {
        if (!(nodes instanceof Array)) {
            nodes.style = {
                'width': width + 'px',
                'height': height + 'px',
                'text-halign': textHAlign,
                'text-valign': textVAlign,
                'background-color': backgroundColor
            };
        } else {
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].style = {
                    'width': width + 'px',
                    'height': height + 'px',
                    'text-halign': textHAlign,
                    'text-valign': textVAlign,
                    'background-color': backgroundColor
                };
            }
        }
    },
    addClassToNodes: function(nodes, newClass) {
        if (!(nodes instanceof Array)) {
            nodes.classes = nodes.classes + " " + newClass;
        } else {
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].classes = nodes[i].classes + " " + newClass;
            }
        }
    },
    createNodes: function(nodes, parent, column, degrees, neighbourLevel) {
        var resultNodes = [];

        for (var i = 0; i < nodes.length; i++) {
            var parentFromNode = nodes[i].endsWith('-E') ? "epi" : "stroma";
            resultNodes.push({
                data: {
                    id: nodes[i],
                    degree: degrees[i],
                    parent: parent == null ? parentFromNode : parent,
                    neighbourLevel: neighbourLevel
                },
                classes: parentFromNode + " " + createAllClasses(parentFromNode)
            });

            //console.log(parentFromNode + " " + createAllClasses(parentFromNode));
        }

        return resultNodes;
    },
    createNodesFromRNodes: function(rNodes, forExplorer) {
        var resultNodes = [];

        for (var i = 0; i < rNodes.length; i++) {
            var parentFromNode = rNodes[i].name.endsWith('-E') ? "epi" : "stroma";
            resultNodes.push({
                data: {
                    id: rNodes[i].name,
                    degree: rNodes[i].degree,
                    parent: forExplorer == true ? 'par' + rNodes[i].level : parentFromNode,//parent == null ? parentFromNode : parent,
                    neighbourLevel: rNodes[i].level,
                    isSource: rNodes[i].isSource,
                    type: parentFromNode
                },
                classes: parentFromNode + " " + createAllClasses(parentFromNode)
            });
        }

        return resultNodes;
    }
};
