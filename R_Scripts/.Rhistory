degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
selpLoopIndices <- which(diag(CorTESLGenes.FDRadj.05)!=0)
selfLoopWeights <- parsedWeights[selpLoopIndices, selpLoopIndices]
selfLoopWeights <- CorTESLGenes.FDRadj.05[selpLoopIndices, selpLoopIndices]
View(selfLoopWeights)
which(diag(CorTESLGenes.FDRadj.05)!=0)
which(diag(CorTESLGenes.FDRadj.05)!=0 && names(diag(CorTESLGenes.FDRadj.05)!=0) != "55620")
which(diag(CorTESLGenes.FDRadj.05)!=0)
selpLoopIndices <- which(diag(CorTESLGenes.FDRadj.05)!=0)
which(names(selpLoopIndices) != "55620")
names(which(names(selpLoopIndices) != "55620"))
names(selpLoopIndices)
selp
selpLoopIndices
selpLoopIndices[which(names(selpLoopIndices) != "55620")]
load("TELGenes_GeneSym.Rdata")
View(edataTE.ERNeg.LGenes)
View(edataTS.ERNeg.LGenes)
View(edataTE.ERNeg.LGenes)
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
CorTESLGenes.FDRadj.05["tbp", ]
CorTESLGenes.FDRadj.05["TBP", ]
names(CorTESLGenes.FDRadj.05)
rownames(CorTESLGenes.FDRadj.05)
colnames(CorTESLGenes.FDRadj.05)
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
which(CorTESLGenes.FDRadj.05 > 0)
length(which(CorTESLGenes.FDRadj.05 > 0))
length(which(CorTESLGenes.FDRadj.05 != 0))
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
#CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
length(which(CorTESLGenes.FDRadj.05 != 0))
length(which(CorTESLGenes.FDRadj.05["CDK4",] != 0))
which(CorTESLGenes.FDRadj.05["CDK4",] != 0)
which(CorTESLGenes.FDRadj.05[,"CDK4"] != 0)
dim(CorTESLGenes.FDRadj.05)
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
CorTESLGenes.FDRadj.05["HLA-DRA"]
CorTESLGenes.FDRadj.05["HLA-DRA",]
CorTESLGenes.FDRadj.05["HLA-DRA", which(CorTESLGenes.FDRadj.05["HLA-DRA",] != 0)]
CorTESLGenes.FDRadj.05[ which(CorTESLGenes.FDRadj.05[,"PTK2B"] != 0), "PTK2B"]
indices <- c()
indices <- c(indices, 1)
indices
class(indices)
CorTESLGenes.FDRadj.05
which(CorTESLGenes.FDRadj.05 != 0)
length(which(CorTESLGenes.FDRadj.05 != 0))
length(which(CorTESLGenes.FDRadj.05 > 0))
length(which(CorTESLGenes.FDRadj.05 < 0))
View(CorTESLGenes.FDRadj.01)
View(CorTESLGenes.FDRadj.01)
View(CorTESLGenes.FDRadj.001)
View(CorTESLGenes.FDRadj.05)
View(CorTESLGenes.FDRadj.05)
which(CorTESLGenes.FDRadj.05 == 0.5150777)
names(CorTESLGenes.FDRadj.05)
rownames(CorTESLGenes.FDRadj.05)
sort(rownames(CorTESLGenes.FDRadj.05))
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:10, 1:10]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05 > 0)]
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05 > 0)] = 0
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
CorTESLGenes.FDRadj.05 > 0
CorTESLGenes.FDRadj.05[CorTESLGenes.FDRadj.05 > 0 && CorTESLGenes.FDRadj.05 < 0.5]
CorTESLGenes.FDRadj.05[CorTESLGenes.FDRadj.05 > 0 && CorTESLGenes.FDRadj.05 < 0.8]
CorTESLGenes.FDRadj.05[CorTESLGenes.FDRadj.05 > 0 & CorTESLGenes.FDRadj.05 < 0.8]
CorTESLGenes.FDRadj.05[CorTESLGenes.FDRadj.05 < 0]
hist(CorTESLGenes.FDRadj.05)
hist(CorTESLGenes.FDRadj.05, break=50)
hist(CorTESLGenes.FDRadj.05, breaks=50)
CorTESLGenes.FDRadj.05
CorTESLGenes.FDRadj.05["TBP", which(CorTESLGenes.FDRadj.05["TBP", ] > !=0)]
CorTESLGenes.FDRadj.05["TBP", which(CorTESLGenes.FDRadj.05["TBP", ] !=0)]
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05[, "UBE2C"] !=0), "UBE2C" ]
min(CorTESLGenes.FDRadj.05[CorTESLGenes.FDRadj.05 > 0])
max(CorTESLGenes.FDRadj.05[CorTESLGenes.FDRadj.05 > 0])
library(jsonlite)
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
#ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
#ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
t1 <- Sys.time()
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
#ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
#ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
t2 <- Sys.time()
diffTime(t2, t1)
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
t1 <- Sys.time()
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
#ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
#ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
t2 <- Sys.time()
difftime(t2, t1)
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
#CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
library(jsonlite)
library(psych)
setwd('C:/Users/Alex/Documents/EpiStroma/R_Scripts')
source('helpers.R')
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
#CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
ptm <- proc.time()
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
timeDif <- proc.time() - ptm
write("Serializing the data took: ", stderr())
write(timeDif, stderr())
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
x <- dget("corMatrix.05.R")
