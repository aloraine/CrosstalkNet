degrees <- dget(paste('degrees.', pValue, ".R", sep = ""))
weights <- c()
exclusions <- list()
neighbours <- list()
resultDegrees <- list()
for (i in 1: length(selectedGenes)) {
exclusions = getExclusions(exclusions, i, selectedGenes)
neighbours[[i]] = getNeighbourNames(corMatrix, selectedGenes[i], exclusions[[i]])
resultDegrees[[i]] = getDegreesForNeighbourNames(degrees, neighbours[[i]])
}
if (epiStromaFlag == TRUE) {
if ((tolower(substr(selectedGenes[1], nchar(selectedGenes[1]) - 1, nchar(selectedGenes[1]))) == '-e')) {
epiSelected <- firstHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
stromaSelected <- secondHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
} else {
epiSelected <- secondHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
stromaSelected <- firstHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
}
}
result <- list(neighbours = neighbours, degrees = resultDegrees, weights = weights)
weights
weights
CorTESLGenes.FDRadj.05["TBP-E", which(CorTESLGenes.FDRadj.05["TBP-E",] != 0)]
library(jsonlite)
library(psych)
setwd('C:/Users/alexp/Documents/EpiStroma/EpiStroma-webapp/R_Scripts')
source('helpers.R')
ptm <- proc.time()
load('TELGenes_GeneSym.RData')
load('TSLGenes_GeneSym.Rdata')
#load('esetTE_ERNeg.RData')
#load('esetTS_ERNeg.RData')
CorTES.LGenes <- cor(t(edataTE.ERNeg.LGenes),t(edataTS.ERNeg.LGenes))
CorTES.LGenes <- CorTES.LGenes[1:100, 1:100]
Signif.TESLGenes<-r.test(54,CorTES.LGenes)
TESLGenes.padj.FDR <- p.adjust(Signif.TESLGenes$p,method="fdr",length(Signif.TESLGenes$p)) # FDR Adjustment for multiple testing
CorTESLGenes.FDRadj.001 <- CorTES.LGenes
CorTESLGenes.FDRadj.01 <- CorTES.LGenes
CorTESLGenes.FDRadj.05 <- CorTES.LGenes
CorTESLGenes.FDRadj.1 <- CorTES.LGenes
timeDif <- proc.time() - ptm
write("Significance Test Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
CorTESLGenes.FDRadj.001[TESLGenes.padj.FDR>0.001] <- 0
CorTESLGenes.FDRadj.01[TESLGenes.padj.FDR>0.01] <- 0
CorTESLGenes.FDRadj.05[TESLGenes.padj.FDR>0.05] <- 0
CorTESLGenes.FDRadj.1[TESLGenes.padj.FDR>0.1] <- 0
CorTESLGenes.FDRadj.001 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.001, 'E', 'row')
CorTESLGenes.FDRadj.001 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.001, 'S', 'col')
CorTESLGenes.FDRadj.01 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.01, 'E', 'row')
CorTESLGenes.FDRadj.01 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.01, 'S', 'col')
CorTESLGenes.FDRadj.05 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.05, 'E', 'row')
CorTESLGenes.FDRadj.05 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.05, 'S', 'col')
CorTESLGenes.FDRadj.1 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.1 , 'E', 'row')
CorTESLGenes.FDRadj.1 <- appendSideToMatrixNames(CorTESLGenes.FDRadj.1 , 'S', 'col')
timeDif <- proc.time() - ptm
write("Overwriting Matrices With Zeros Took: ", stderr())
write(timeDif, stderr())
ptm <- proc.time()
degrees.001 <- getDegrees(CorTESLGenes.FDRadj.001)
degrees.01 <- getDegrees(CorTESLGenes.FDRadj.01)
degrees.05 <- getDegrees(CorTESLGenes.FDRadj.05)
degrees.1 <- getDegrees(CorTESLGenes.FDRadj.1)
timeDif <- proc.time() - ptm
write("Calculating Degrees Took: ", stderr())
write(timeDif, stderr())
#CorTESLGenes.FDRadj.001 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.001, degrees.001$epiDegree, degrees.001$stromaDegree)
#CorTESLGenes.FDRadj.01 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.01, degrees.01$epiDegree, degrees.01$stromaDegree)
#CorTESLGenes.FDRadj.05 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.05, degrees.05$epiDegree, degrees.05$stromaDegree)
#CorTESLGenes.FDRadj.1 <- removeUnnecessaryGenes(CorTESLGenes.FDRadj.1, degrees.1$epiDegree, degrees.1$stromaDegree)
#degrees <- getDegrees(corMatrix)
ptm <- proc.time()
dput(CorTESLGenes.FDRadj.001, 'corMatrix.001.R')
dput(CorTESLGenes.FDRadj.01, 'corMatrix.01.R')
dput(CorTESLGenes.FDRadj.05, 'corMatrix.05.R')
dput(CorTESLGenes.FDRadj.1, 'corMatrix.1.R')
dput(degrees.001, 'degrees.001.R')
dput(degrees.01, 'degrees.01.R')
dput(degrees.05, 'degrees.05.R')
dput(degrees.1, 'degrees.1.R')
timeDif <- proc.time() - ptm
write("Serializing the data took: ", stderr())
write(timeDif, stderr())
#output <- list(degrees = degrees.05, weights = CorTESLGenes.FDRadj.05)
#cat(format(serializeJSON(output)))
setwd('C:/Users/alexp/Documents/EpiStroma/EpiStroma-webapp/R_Scripts')
source('helpers.R')
epiStromaFlag <- TRUE
# args <- commandArgs(trailingOnly = TRUE)
# pValue <- args[2]
# numberOfNeighbours <- as.numeric(args[3])
# selectedGenes <- c()
# for (i in 1: numberOfNeighbours) {
#     selectedGenes <- c(selectedGenes, as.character(args[3 + i]))
# }
pValue <- '05'
selectedGenes = c('TBP-E', 'UBE2C-S')
firstHalf <- selectedGenes[seq(from = 1, to = length(selectedGenes), by = 2)]
if (length(selectedGenes) > 1) {
secondHalf <- selectedGenes[seq(from = 2, to = length(selectedGenes), by = 2)]
}
#
write(paste(first, second, side, pValue), stderr())
corMatrix <- dget(paste('corMatrix.', pValue, ".R", sep = ""))
degrees <- dget(paste('degrees.', pValue, ".R", sep = ""))
weights <- c()
exclusions <- list()
neighbours <- list()
resultDegrees <- list()
for (i in 1: length(selectedGenes)) {
exclusions = getExclusions(exclusions, i, selectedGenes)
neighbours[[i]] = getNeighbourNames(corMatrix, selectedGenes[i], exclusions[[i]])
resultDegrees[[i]] = getDegreesForNeighbourNames(degrees, neighbours[[i]])
}
if (epiStromaFlag == TRUE) {
if ((tolower(substr(selectedGenes[1], nchar(selectedGenes[1]) - 1, nchar(selectedGenes[1]))) == '-e')) {
epiSelected <- firstHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
stromaSelected <- secondHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
} else {
epiSelected <- secondHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
stromaSelected <- firstHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
}
}
result <- list(neighbours = neighbours, degrees = resultDegrees, weights = weights)
weights
CorTESLGenes.FDRadj.05["TBP-E", which(CorTESLGenes.FDRadj.05["TBP-E",] != 0)]
library(jsonlite)
setwd('C:/Users/alexp/Documents/EpiStroma/EpiStroma-webapp/R_Scripts')
source('helpers.R')
epiStromaFlag <- TRUE
# args <- commandArgs(trailingOnly = TRUE)
# pValue <- args[2]
# numberOfNeighbours <- as.numeric(args[3])
# selectedGenes <- c()
# for (i in 1: numberOfNeighbours) {
#     selectedGenes <- c(selectedGenes, as.character(args[3 + i]))
# }
pValue <- '05'
selectedGenes = c('TBP-E', 'UBE2C-S', 'STAT3-E')
firstHalf <- selectedGenes[seq(from = 1, to = length(selectedGenes), by = 2)]
if (length(selectedGenes) > 1) {
secondHalf <- selectedGenes[seq(from = 2, to = length(selectedGenes), by = 2)]
}
#
write(paste(first, second, side, pValue), stderr())
corMatrix <- dget(paste('corMatrix.', pValue, ".R", sep = ""))
degrees <- dget(paste('degrees.', pValue, ".R", sep = ""))
weights <- c()
exclusions <- list()
neighbours <- list()
resultDegrees <- list()
for (i in 1: length(selectedGenes)) {
exclusions = getExclusions(exclusions, i, selectedGenes)
neighbours[[i]] = getNeighbourNames(corMatrix, selectedGenes[i], exclusions[[i]])
resultDegrees[[i]] = getDegreesForNeighbourNames(degrees, neighbours[[i]])
}
if (epiStromaFlag == TRUE) {
if ((tolower(substr(selectedGenes[1], nchar(selectedGenes[1]) - 1, nchar(selectedGenes[1]))) == '-e')) {
epiSelected <- firstHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
stromaSelected <- secondHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
} else {
epiSelected <- secondHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
stromaSelected <- firstHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
}
}
result <- list(neighbours = neighbours, degrees = resultDegrees, weights = weights)
cat(format(serializeJSON(result)))
weights
CorTESLGenes.FDRadj.05["STAT3-E", which(CorTESLGenes.FDRadj.05["STAT3-E",] != 0)]
library(jsonlite)
setwd('C:/Users/alexp/Documents/EpiStroma/EpiStroma-webapp/R_Scripts')
source('helpers.R')
epiStromaFlag <- TRUE
# args <- commandArgs(trailingOnly = TRUE)
# pValue <- args[2]
# numberOfNeighbours <- as.numeric(args[3])
# selectedGenes <- c()
# for (i in 1: numberOfNeighbours) {
#     selectedGenes <- c(selectedGenes, as.character(args[3 + i]))
# }
pValue <- '05'
selectedGenes = c('VPS72-E', 'UBE2C-S', 'TBP-E', 'CDC45-S')
firstHalf <- selectedGenes[seq(from = 1, to = length(selectedGenes), by = 2)]
if (length(selectedGenes) > 1) {
secondHalf <- selectedGenes[seq(from = 2, to = length(selectedGenes), by = 2)]
}
#
write(paste(first, second, side, pValue), stderr())
corMatrix <- dget(paste('corMatrix.', pValue, ".R", sep = ""))
degrees <- dget(paste('degrees.', pValue, ".R", sep = ""))
weights <- c()
exclusions <- list()
neighbours <- list()
resultDegrees <- list()
for (i in 1: length(selectedGenes)) {
exclusions = getExclusions(exclusions, i, selectedGenes)
neighbours[[i]] = getNeighbourNames(corMatrix, selectedGenes[i], exclusions[[i]])
resultDegrees[[i]] = getDegreesForNeighbourNames(degrees, neighbours[[i]])
}
if (epiStromaFlag == TRUE) {
if ((tolower(substr(selectedGenes[1], nchar(selectedGenes[1]) - 1, nchar(selectedGenes[1]))) == '-e')) {
epiSelected <- firstHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
stromaSelected <- secondHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
} else {
epiSelected <- secondHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
stromaSelected <- firstHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
}
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
}
result <- list(neighbours = neighbours, degrees = resultDegrees, weights = weights)
cat(format(serializeJSON(result)))
weights
weights[which(rownames(weights) in c("TBP-E"),]
weights[which(rownames(weights) %in% c("TBP-E"),]
weights[which(rownames(weights) %in% c("TBP-E")),]
weights[!which(rownames(weights) %in% c("TBP-E"),]
weights[!which(rownames(weights) %in% c("TBP-E")),]
weights[which(rownames(weights) %in% c("TBP-E")),]
which(rownames(weights) %in% c("TBP-E"))
!which(rownames(weights) %in% c("TBP-E"))
weights[-which(rownames(weights) %in% c("TBP-E")),]
library(jsonlite)
setwd('C:/Users/alexp/Documents/EpiStroma/EpiStroma-webapp/R_Scripts')
source('helpers.R')
epiStromaFlag <- TRUE
# args <- commandArgs(trailingOnly = TRUE)
# pValue <- args[2]
# numberOfNeighbours <- as.numeric(args[3])
# selectedGenes <- c()
# for (i in 1: numberOfNeighbours) {
#     selectedGenes <- c(selectedGenes, as.character(args[3 + i]))
# }
pValue <- '05'
selectedGenes = c('VPS72-E', 'UBE2C-S', 'TBP-E', 'CDC45-S')
firstHalf <- selectedGenes[seq(from = 1, to = length(selectedGenes), by = 2)]
if (length(selectedGenes) > 1) {
secondHalf <- selectedGenes[seq(from = 2, to = length(selectedGenes), by = 2)]
}
#
write(paste(first, second, side, pValue), stderr())
corMatrix <- dget(paste('corMatrix.', pValue, ".R", sep = ""))
degrees <- dget(paste('degrees.', pValue, ".R", sep = ""))
weights <- c()
exclusions <- list()
neighbours <- list()
resultDegrees <- list()
for (i in 1: length(selectedGenes)) {
exclusions = getExclusions(exclusions, i, selectedGenes)
neighbours[[i]] = getNeighbourNames(corMatrix, selectedGenes[i], exclusions[[i]])
resultDegrees[[i]] = getDegreesForNeighbourNames(degrees, neighbours[[i]])
}
if (epiStromaFlag == TRUE) {
if ((tolower(substr(selectedGenes[1], nchar(selectedGenes[1]) - 1, nchar(selectedGenes[1]))) == '-e')) {
epiSelected <- firstHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
stromaSelected <- secondHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
} else {
epiSelected <- secondHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
stromaSelected <- firstHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
}
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
weights[-which(rownames(weights) %in% epiSelected), -which(colnames(weights) %in% stromaSelected)]
}
result <- list(neighbours = neighbours, degrees = resultDegrees, weights = weights)
cat(format(serializeJSON(result)))
weights
library(jsonlite)
setwd('C:/Users/alexp/Documents/EpiStroma/EpiStroma-webapp/R_Scripts')
source('helpers.R')
epiStromaFlag <- TRUE
# args <- commandArgs(trailingOnly = TRUE)
# pValue <- args[2]
# numberOfNeighbours <- as.numeric(args[3])
# selectedGenes <- c()
# for (i in 1: numberOfNeighbours) {
#     selectedGenes <- c(selectedGenes, as.character(args[3 + i]))
# }
pValue <- '05'
selectedGenes = c('VPS72-E', 'UBE2C-S', 'TBP-E', 'CDC45-S')
firstHalf <- selectedGenes[seq(from = 1, to = length(selectedGenes), by = 2)]
if (length(selectedGenes) > 1) {
secondHalf <- selectedGenes[seq(from = 2, to = length(selectedGenes), by = 2)]
}
#
write(paste(first, second, side, pValue), stderr())
corMatrix <- dget(paste('corMatrix.', pValue, ".R", sep = ""))
degrees <- dget(paste('degrees.', pValue, ".R", sep = ""))
weights <- c()
exclusions <- list()
neighbours <- list()
resultDegrees <- list()
for (i in 1: length(selectedGenes)) {
exclusions = getExclusions(exclusions, i, selectedGenes)
neighbours[[i]] = getNeighbourNames(corMatrix, selectedGenes[i], exclusions[[i]])
resultDegrees[[i]] = getDegreesForNeighbourNames(degrees, neighbours[[i]])
}
if (epiStromaFlag == TRUE) {
if ((tolower(substr(selectedGenes[1], nchar(selectedGenes[1]) - 1, nchar(selectedGenes[1]))) == '-e')) {
epiSelected <- firstHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
stromaSelected <- secondHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
} else {
epiSelected <- secondHalf
epiNeighbours <- list()
if (length(neighbours) > 1) {
epiNeighbours <- neighbours[seq(from = 1, to = length(neighbours), by = 2)]
}
stromaSelected <- firstHalf
stromaNeighbours <- list()
if (length(neighbours) > 0) {
stromaNeighbours <- neighbours[seq(from = 2, to = length(neighbours), by = 2)]
}
epiIndex <- c(epiSelected, unlist(epiNeighbours))
stromaIndex <- c(stromaSelected, unlist(stromaNeighbours))
}
weights <- corMatrix[unique(epiIndex), unique(stromaIndex)]
weights[-which(rownames(weights) %in% epiSelected), -which(colnames(weights) %in% stromaSelected)] = 0
}
result <- list(neighbours = neighbours, degrees = resultDegrees, weights = weights)
cat(format(serializeJSON(result)))
weights
x <- c(1,2,3)
names(x) <- c(a,b,c)
names(x) <- c("A","B","c")
C
X
x
names(x[1])
x = list(list("A"), list("b"))
x
unlist(x)
>unlist
?unlist
unlist(x, FALSE)
x = list(list("A",1), list("b",2))
unlist(x, FALSE)
for (i in 1:0) { print("A")}
for (i in 1:0) { print("A")}
for (i in 1:1) { print("A")}
?unique
append(list(1,2),list(3,4))
append(list("A","B"),list("c","d"))
x = list("a","B","C")
for (mem in x) {}
for (mem in x) {print
(x)}
for (mem in x) {print(mem)}
x
x[[4]] <- c(x[[4]], 5)
x[[4]] <- c() 5)
x[[4]] <- c( 5)
x[[4]]
x[[4]][1]
x[[4]] <- c( 5,6)
x[[4]][1]
x[[4]][2]
x <- c(1,2,3,4,5)
names(x) <- ("A","B","C","D","E")
names(x) <- c("A","B","C","D","E")
c
x
top(x, 3)
tail(sort(x), 3)
tail(sort(x), 1)
x
which(names(x) %in% c("R"))
x[-which(names(x) %in% c("R"))]
x[-which(names(x) %in% c())]
x[-0]
x[-1]
integer(0)
0
class(0)
class(oL)
class(0L)
class(integer(0))
length(c())
which(names(x) %in% c()) != 0
-which(names(x) %in% c()) != 0
length(which(names(x) %in% c()) != 0)
dim(CorTESLGenes.FDRadj.05)
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05[, "CDC45-S"] != 0), "CDC45-S"]
CorTESLGenes.FDRadj.05["HLA-DRA-E", which(CorTESLGenes.FDRadj.05["HLA-DRA-E",] != 0)]
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05[, "PTK2B-S"] != 0), "PTK2B-S"]
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05[, "UBE2C-S"] != 0), "UBE2C-S"]
CorTESLGenes.FDRadj.05[which(CorTESLGenes.FDRadj.05[, "CDC45-S"] != 0), "CDC45-S"]
CorTESLGenes.FDRadj.05["SUZ12-E", which(CorTESLGenes.FDRadj.05["SUZ12-E",] != 0)]
CorTESLGenes.FDRadj.05["TBP-E", which(CorTESLGenes.FDRadj.05["TBP-E",] != 0)]
CorTESLGenes.FDRadj.05["UBE2C-E", which(CorTESLGenes.FDRadj.05["UBE2C-E",] != 0)]
y <- list()
x[[1]]
y[[1]]
x[NA]
x[""]
x <- list(c("a","b"), c("c", "b"))
unique(x)
"CDC45-E" %in% c("CDC45-E", "A")
